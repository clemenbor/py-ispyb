from datetime import datetime
from random import randint
import uuid


test_data = [
    {
        'route': '/contacts/labs',
        'name': 'laboratory',
        'json': lambda prev: {
            "laboratoryUUID": "UUID",
            "name": "Test lab",
            "address": "Test address",
            "city": "City",
            "country": "Country",
            "url": "url",
            "organization": "Test org",
            "laboratoryPk": 0,
            "postcode": "Test code",
        }
    },
    {
        'route': '/contacts/persons',
        'name': 'person',
        'json': lambda prev: {
            "laboratoryId": prev['laboratory']["laboratoryId"],
            "personUUID": "Person uuid",
            "familyName": "Family",
            "givenName": "Name",
            "title": "Dr",
            "emailAddress": "email",
            "phoneNumber": "2233",
            "login": uuid.uuid4().hex.upper()[0:6],
            "faxNumber": "222",
            "cache": "string",
        }
    },
    {
        'route': '/proposals',
        'name': 'proposal',
        'json': lambda prev: {
            "proposalCode": "MX",
            "title": "Test proposal",
            "proposalType": "MX",
            "personId": prev['person']["personId"],
            "proposalNumber": randint(1, 1e5),
            "state": "Open",
        }
    },
    {
        'route': '/contacts/lab_contacts',
        'name': 'labContact',
        'json': lambda prev: {
            "personId": prev['person']["personId"],
            "cardName": "Card",
            "proposalId": prev['proposal']["proposalId"],
            "defaultCourrierCompany": "DHL",
            "courierAccount": "01",
            "billingReference": "02",
            "dewarAvgCustomsValue": 0,
            "dewarAvgTransportValue": 0,
        }
    },
    {
        'route': '/beamline/detectors',
        'name': 'detector',
        'json': lambda prev: {
            "detectorType": "PixelCounting",
            "detectorManufacturer": "TestManufacturer",
            "detectorModel": "T1",
            "detectorPixelSizeHorizontal": 0.75,
            "detectorPixelSizeVertical": 0.75,
            "DETECTORMAXRESOLUTION": 0.6,
            "DETECTORMINRESOLUTION": 6,
            "detectorSerialNumber": uuid.uuid4().hex.upper()[0:6],
            "detectorDistanceMin": "100",
            "detectorDistanceMax": "1000",
            "trustedPixelValueRangeLower": "1",
            "trustedPixelValueRangeUpper": "2",
            "sensorThickness": 1,
            "overload": 1,
            "XGeoCorr": "100",
            "YGeoCorr": "200",
            "detectorMode": "testMode",
            "density": 1,
            "composition": "comp",
            "numberOfPixelsX": 8000,
            "numberOfPixelsY": 8000,
            "detectorRollMin": "1",
            "detectorRollMax": "2",
            "localName": "TestDetector",
        }
    },
    {
        'route': '/beamline/setups',
        'name': 'beamLineSetup',
        'json': lambda prev: {
            "detectorId": prev['detector']["detectorId"],
            "synchrotronMode": "Test mode",
            "undulatorType1": "Si111",
            "focalSpotSizeAtSample": 10,
            "focusingOptic": "CRL",
            "beamDivergenceHorizontal": 0.1,
            "beamDivergenceVertical": 0.1,
            "polarisation": 0,
            "monochromatorType": "T",
            "setupDate": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "synchrotronName": "TestSynch",
            "maxExpTimePerDataCollection": "0.04",
            "maxExposureTimePerImage": 10,
            "minExposureTimePerImage": "0",
            "goniostatMaxOscillationSpeed": "1",
            "goniostatMaxOscillationWidth": "1",
            "goniostatMinOscillationWidth": "1",
            "maxTransmission": "100",
            "minTransmission": "0",
            "beamlineName": "testBeamline",
            "beamSizeXMin": 10,
            "beamSizeXMax": 200,
            "beamSizeYMin": 10,
            "beamSizeYMax": 200,
            "energyMin": 5,
            "energyMax": 15,
            "omegaMin": 0,
            "omegaMax": 360,
            "kappaMin": 0,
            "kappaMax": 360,
            "phiMin": 0,
            "phiMax": 180,
            "active": 0,
            "numberOfImagesMax": 1000000,
            "numberOfImagesMin": 1,
        }
    },
    {
        'route': '/samples/proteins',
        'name': 'protein',
        'json': lambda prev: {
            "proposalId": prev['proposal']["proposalId"],
            "name": "Protein name",
            "acronym": "ancr",
            "molecularMass": "2",
            "proteinType": "2",
            "personId": prev['person']["personId"],
        }
    },
    {
        'route': '/samples/diffraction_plans',
        'name': 'diffractionPlan',
        'json': lambda prev: {
            "name": "Test",
            "presetForProposalId": prev['proposal']["proposalId"],
            "detectorId": prev['detector']["detectorId"],
            "experimentKind": "OSC",
            "observedResolution": 2,
            "minimalResolution": 2,
            "exposureTime": 0.04,
            "oscillationRange": 360,
            "maximalResolution": 1,
            "screeningResolution": 2,
            "radiationSensitivity": 0,
            "preferredBeamSizeX": 20,
            "preferredBeamSizeY": 20,
            "preferredBeamDiameter": 20,
            "comments": "Test comment",
            "DIFFRACTIONPLANUUID": "uuid",
            "aimedCompleteness": "99",
            "aimedIOverSigmaAtHighestRes": "1",
            "aimedMultiplicity": "1",
            "aimedResolution": "1",
            "anomalousData": 0,
            "complexity": "1",
            "estimateRadiationDamage": 0,
            "forcedSpaceGroup": "P4",
            "requiredCompleteness": "99",
            "requiredMultiplicity": "1",
            "requiredResolution": "1",
            "numberOfPositions": 1,
            "minOscWidth": 0.1,
            "energy": 12.70,
            "transmission": 100,
            "kappaStart": 0,
            "axisStart": 0,
            "axisRange": 0.1,
            "numberOfImages": 3600,
            "beamLineName": "test beamline",
            "distance": "200",
        }
    },
    {
        'route': '/samples/crystals',
        'name': 'crystal',
        'json': lambda prev: {
            "diffractionPlanId": prev['diffractionPlan']["diffractionPlanId"],
            "proteinId": prev['protein']["proteinId"],
            "crystalUUID": "crUUID",
            "name": "Test crystal",
            "spaceGroup": "P4",
            "morphology": "No",
            "color": "Green",
            "size_X": "10",
            "size_Y": "10",
            "size_Z": "100",
            "cell_a": "1",
            "cell_b": "1",
            "cell_c": "1",
            "cell_alpha": "2",
            "cell_beta": "2",
            "cell_gamma": "2",
            "comments": "Comment",
            "pdbFileName": "pdf_filename",
            "pdbFilePath": "pdf_filen_path",
            "abundance": 0,
            "theoreticalDensity": 0,
        }
    },
    {
        'route': '/shippings',
        'name': 'shipping',
        'json': lambda prev: {
            "proposalId": prev['proposal']["proposalId"],
            "shippingName": "Test shipment",
            "deliveryAgent_agentName": "DHL",
            "deliveryAgent_agentCode": "Code",
            "deliveryAgent_flightCode": "Code",
            "shippingStatus": "Open",
            "laboratoryId": prev['laboratory']["laboratoryId"],
            "isStorageShipping": 0,
            "comments": "Comment",
            "sendingLabContactId": prev['labContact']["labContactId"],
            "returnLabContactId": prev['labContact']["labContactId"],
            "deliveryAgent_flightCodePersonId": prev['person']["personId"],
            "returnCourier": "DHL",
            "deliveryAgent_label": "Label",
            "physicalLocation": "Store",
        }
    },
    {
        'route': '/sessions/beam_calendars',
        'name': 'beamCalendar',
        'json': lambda prev: {
            "run": "1",
            "beamStatus": "Open",
            "endDate": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "startDate": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
    },
    {
        'route': '/sessions',
        'name': 'session',
        'json': lambda prev: {
            "bltimeStamp": "2015-12-21 16:20:44",
            "proposalId": prev['proposal']["proposalId"],
            "beamLineName": "i03",
            "visit_number": 2,
            "archived": 0,
            "beamLineSetupId": prev['beamLineSetup']["beamLineSetupId"],
            "beamCalendarId":prev['beamCalendar']["beamCalendarId"],
            "endDate": "2015-12-21 16:20:44",
            "startDate": "2015-12-21 16:20:44",
        }
    },
    {
        'route': '/shippings/dewars',
        'name': 'dewar',
        'json': lambda prev: {
            "shippingId": prev['shipping']["shippingId"],
            "code": "00001",
            "comments": "comments",
            "storageLocation": "string",
            "dewarStatus": "open",
            "isStorageDewar": 1,
            "barCode": uuid.uuid4().hex.upper()[0:6],
            "firstExperimentId": prev['session']["sessionId"],
            "customsValue": 10,
            "transportValue": 100,
            "trackingNumberToSynchrotron": "00001",
            "trackingNumberFromSynchrotron": "00002",
            "type": "Dewar",
            "FACILITYCODE": "fac",
            "weight": 30,
            "deliveryAgent_barcode": "test",
        }
    }
]
